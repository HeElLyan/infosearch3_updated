# -*- coding: utf-8 -*-
"""bool-search.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12PiZIU4k4trv_Jub-YEYRFgoQbIdFGbB
"""

from google.colab import drive
drive.mount('gdrive')

tokens_inverted_indexes_path = 'gdrive/My Drive/4курс/Инфопоиск/result/tokens_inverted_indexes_updated.txt'
lemmas_inverted_indexes_path = 'gdrive/My Drive/4курс/Инфопоиск/result/lemmas_inverted_indexes_updated.txt'

with open(tokens_inverted_indexes_path) as source:
    tokens_inverted_indexes = source.read()

tokens_inverted_indexes = tokens_inverted_indexes.split('\n')
del tokens_inverted_indexes[-1]

with open(lemmas_inverted_indexes_path) as source:
    lemmas_inverted_indexes = source.read()

lemmas_inverted_indexes = lemmas_inverted_indexes.split('\n')
del lemmas_inverted_indexes[-1]

lemmas_inverted_indexes[:10]

keys_tokens = [tokens_inverted_indexes[i].split(": ")[0] for i in range(len(tokens_inverted_indexes))]
print(keys_tokens)

vals_tokens = [tokens_inverted_indexes[i].split(": ")[1].split(' ') for i in range(len(tokens_inverted_indexes))]
print(vals_tokens)

dictionary_tokens = dict(zip(keys_tokens, vals_tokens))
print(dictionary_tokens)

keys_lemmas = [lemmas_inverted_indexes[i].split(": ")[0] for i in range(len(lemmas_inverted_indexes))]
print(keys_lemmas)

vals_lemmas = [lemmas_inverted_indexes[i].split(": ")[1].split(' ') for i in range(len(lemmas_inverted_indexes))]
print(vals_lemmas)

dictionary_lemmas = dict(zip(keys_lemmas, vals_lemmas))
print(dictionary_lemmas)

import re
import string

class Node:
    def eval(self, index, current_item) -> bool:
        pass


class AND(Node):

    def __init__(self, left: Node, right: Node):
        super().__init__()
        self.left = left
        self.right = right

    def eval(self, index, current_item):
        return self.left.eval(index, current_item) and self.right.eval(index, current_item)


class OR(Node):

    def __init__(self, left: Node, right: Node):
        super().__init__()
        self.left = left
        self.right = right

    def eval(self, index, current_item):
        return self.left.eval(index, current_item) or self.right.eval(index, current_item)


class NOTAND(Node):

    def __init__(self, left: Node, right: Node):
        super().__init__()
        self.left = left
        self.right = right

    def eval(self, index, current_item):
        return not (self.left.eval(index, current_item) and self.right.eval(index, current_item))


class Word(Node):

    def __init__(self, word):
        super().__init__()
        self.word = word

    def eval(self, index, html_file):
        if self.word in index:
            return html_file in index[self.word]
        else:
            return False


def parser1(tokens):
    left_node = parser2(tokens)

    if len(tokens) > 0:

        if tokens[0] == 'OR':
            tokens.pop(0)
            right_node = parser1(tokens)
            return OR(left_node, right_node)

    return left_node


def parser2(tokens):
    left_node = parser3(tokens)

    if len(tokens) > 0:
        if tokens[0] == 'AND':
            tokens.pop(0)
            right_node = parser2(tokens)
            return AND(left_node, right_node)

    return left_node

def parser3(tokens) -> Node:
    if tokens[0] in string.ascii_lowercase:
        a = re.findall(r'(\w+)', ''.join(tokens))

        for x in range(len(a[0])):
            tokens.pop(0)

        return Word(a[0])

    if tokens[0] == '(':
        tokens.pop(0)

    node = parser1(tokens)

    if tokens[0] == ')':
        tokens.pop(0)

    return node

def parse(query: str) -> Node:
    return parser1([x for x in query])

file_names = ['выкачка' + str(i + 1) + '.txt' for i in range(142)]
file_names[:3]

def boolean_search(query):
    
    root_node = parse(query)

    result_files_list = []

    for file_name in file_names:
        if root_node.eval(dictionary_tokens, file_name):
            result_files_list.append(file_name)

    return result_files_list

res1 = boolean_search("angel AND sadness OR darkness AND devil")
print(len(res1))
print(res1)

res2 = boolean_search("(sadness OR devil) AND (darkness OR angel)")
print(len(res2))
print(res2)